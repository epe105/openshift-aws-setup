---
# roles/aws.provision/tasks/03_vms.yml

- name: Find rhel7 default AMI
  ec2_ami_find:
   name: "RHEL-7.3*"
   owner: "{{ redhat_owner_id }}"
   architecture: "x86_64"
   virtualization_type: "hvm"
   sort: "creationDate"
   sort_order: "descending"
   sort_end: 1
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
  register: "ami_find"
  when: redhat_owner_id is defined

#---------------------------------------------------
# Master
#---------------------------------------------------
- name: Set master AMI details
  set_fact:
   ec2_master_image: "{{ ami_find['results'][0]['ami_id'] }}"
  when: (ec2_master_image is not defined) and
        (redhat_owner_id is defined)

- name: Find master AMI ID
  ec2_ami_find:
   ami_id: "{{ ec2_master_image }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
  register: "ami_find"
  when: ec2_master_image is defined

- name: Set master AMI device
  set_fact:
    ec2_master_device: "{{ami_find['results'][0]['root_device_name']}}"

# - debug: msg="{{ ec2_master_image }}"
# - debug: msg="{{ ec2_master_device }}"

- name: Provision master
  ec2:
   instance_type: "{{ ec2_master_instance_type }}"
   image: "{{ ec2_master_image }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   wait: true
   key_name: "{{ remote_user_key }}"
   vpc_subnet_id: "{{ public_subnet_id }}"
   group: ['{{ ec2_security_group }}', '{{ ec2_security_group_ingress }}', '{{ ec2_security_group_egress }}', '{{ ec2_security_group_ssh }}']
   volumes:
    - device_name: "{{ ec2_master_device }}"
      volume_size: "{{ os_master_root_vol_size }}"
      volume_type: gp2
      delete_on_termination: true
    - device_name: "{{ os_docker_block_device }}"
      volume_size: "{{ os_docker_vol_size }}"
      volume_type: gp2
      delete_on_termination: true
   count_tag:
    Name: "{{ ec2_master_tag }}"
   instance_tags:
    Name: "{{ ec2_master_tag }}"
    namespace: "{{ namespace }}"
   exact_count: 1
  register: ec2_master

- name: Allocate a new elastic IP and associate it with master
  ec2_eip:
   device_id: "{{ ec2_master['tagged_instances'][0]['id'] }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   release_on_disassociation: true
  register: master_elastic_ip

#---------------------------------------------------
# Nodes
#---------------------------------------------------
- name: Set node AMI details
  set_fact:
   ec2_node_image: "{{ ami_find['results'][0]['ami_id'] }}"
  when: (ec2_node_image is not defined) and
        (redhat_owner_id is defined)

- name: Find node AMI ID
  ec2_ami_find:
   ami_id: "{{ ec2_node_image }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
  register: "ami_find"
  when: ec2_node_image is defined

- name: Set node AMI device
  set_fact:
    ec2_node_device: "{{ami_find['results'][0]['root_device_name']}}"

# - debug: msg="{{ ec2_node_image }}"
# - debug: msg="{{ ec2_node_device }}"

- name: Provision nodes
  ec2:
    instance_type: "{{ ec2_node_instance_type }}"
    image: "{{ ec2_node_image }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    wait: true
    key_name: "{{ remote_user_key }}"
    vpc_subnet_id: "{{ public_subnet_id }}"
    group: ['{{ ec2_security_group }}', '{{ ec2_security_group_ingress }}', '{{ ec2_security_group_egress }}', '{{ ec2_security_group_ssh }}']
    volumes:
      - device_name: "{{ ec2_node_device }}"
        volume_size: "{{ os_node_root_vol_size }}"
        volume_type: gp2
        delete_on_termination: true
      - device_name: "{{ os_docker_block_device }}"
        volume_size: "{{ os_docker_vol_size }}"
        volume_type: gp2
        delete_on_termination: true
    count_tag:
      Name: "{{ ec2_node_tag }}{{ item }}-{{ namespace }}"
    instance_tags:
      Name: "{{ ec2_node_tag }}{{ item }}-{{ namespace }}"
      namespace: "{{ namespace }}"
    exact_count: 1
    assign_public_ip: yes
  with_sequence: start=1 end={{ ec2_instance_count|int }}
  register: ec2_nodes

#---------------------------------------------------
# Bastion
#---------------------------------------------------
- name: Set bastion AMI details
  set_fact:
   ec2_bastion_image: "{{ ami_find['results'][0]['ami_id'] }}"
  when: (ec2_bastion_image is not defined) and
        (redhat_owner_id is defined)

- name: Find bastion AMI ID
  ec2_ami_find:
   ami_id: "{{ ec2_bastion_image }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
  register: "ami_find"
  when: ec2_bastion_image is defined

- name: Set bastion AMI device
  set_fact:
    ec2_bastion_device: "{{ami_find['results'][0]['root_device_name']}}"

# - debug: msg="{{ ec2_bastion_image }}"
# - debug: msg="{{ ec2_bastion_device }}"

- name: Provision bastion
  ec2:
    instance_type: "{{ ec2_bastion_instance_type }}"
    image: "{{ ec2_bastion_image }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    wait: true
    key_name: "{{ remote_user_key }}"
    vpc_subnet_id: "{{ public_subnet_id }}"
    group: ['{{ ec2_security_group }}', '{{ ec2_security_group_ingress }}', '{{ ec2_security_group_egress }}', '{{ ec2_security_group_ssh }}']
    count_tag:
      Name: "{{ ec2_bastion_tag }}"
    instance_tags:
      Name: "{{ ec2_bastion_tag }}"
      namespace: "{{ namespace }}"
    exact_count: 1
    assign_public_ip: yes
  register: ec2_bastion

#---------------------------------------------------
# Register Facts
#---------------------------------------------------
- name: Register VM facts
  set_fact:
   master_private_ip: "{{ ec2_master['tagged_instances'][0]['private_ip'] }}"
   master_public_ip: "{{ master_elastic_ip['public_ip'] }}"
   master_private_dns_name: "{{ ec2_master['tagged_instances'][0]['private_dns_name'] }}"
   bastion_private_ip: "{{ ec2_bastion['tagged_instances'][0]['private_ip'] }}"
   bastion_public_ip: "{{ ec2_bastion['tagged_instances'][0]['public_ip'] }}"

# - debug:
#     msg: "{{  ec2_nodes  }}"

# Create a dict of node public and private ip addresses
- name: Register Node facts
  set_fact:
    nodes_ip: "{{ nodes_ip|default([]) + [ {'index': item.item, 'public_ip': item.tagged_instances[0].public_ip, 'private_ip': item.tagged_instances[0].private_ip, 'private_dns_name': item.tagged_instances[0].private_dns_name} ] }}"
  with_items: "{{ec2_nodes.results}}"

- debug:
  msg: "{{  nodes_ip  }}"

- name: Wait for master and bastion SSH to come up
  local_action: wait_for
                host={{ item }}
                port=22
                state=started
  with_items:
   - "{{bastion_public_ip}}"
   - "{{master_public_ip}}"

- name: Wait for node SSH to come up
  local_action: wait_for
                host={{ item.public_ip }}
                port=22
                state=started
  with_items: "{{ nodes_ip }}"
