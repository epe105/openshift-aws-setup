---
# roles/aws.provision/tasks/main.yml

#---------------------------------------------------
# Key
#---------------------------------------------------
- name: Check key exists
  stat:
    path: "{{ remote_user_key_file }}"
  register: stat_result

- name: Remove remote key
  ec2_key: name="{{ remote_user_key }}" region="{{ aws_region }}" state=absent
  when: stat_result.stat.exists == False
  ignore_errors: yes

- name: Create new key
  ec2_key: name="{{ remote_user_key }}" region="{{ aws_region }}" state=present
  register: ec2_key
  when: stat_result.stat.exists == False

- name: Create hidden directory
  file: path="{{ workspace }}" state=directory
  when: stat_result.stat.exists == False

- name: Copy key file
  copy:
    content: "{{ ec2_key.key.private_key }}"
    dest: "{{ remote_user_key_file }}"
    mode: 0400
  when: stat_result.stat.exists == False

- name: Set key permissions
  file:
   path: "{{ remote_user_key_file }}"
   state: touch
   mode: 0400
  when: stat_result.stat.exists == False

- name: Set ec2 key
  ec2_key:
    name: "{{ remote_user_key }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    key_material: "{{ item }}"
    force: false
    state: present
  with_file: "{{ remote_user_key_file }}"
  register: ec2_key
  when: stat_result.stat.exists == True
  ignore_errors: yes

#---------------------------------------------------
# VPC
#---------------------------------------------------
- name: Create public vpc
  ec2_vpc_net:
   name: "{{ vpc_tag }}"
   cidr_block: "{{ vpc_cidr_block }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   tags:
    Name: "{{ vpc_tag }}"
    namespace: "{{ namespace }}"
  register: vpc_facts

- name: Set vpc fact
  set_fact:
   vpc_id: "{{ vpc_facts['vpc']['id'] }}"

#---------------------------------------------------
# Subnet
#---------------------------------------------------
- name: Create public subnet
  ec2_vpc_subnet:
   vpc_id: "{{ vpc_id }}"
   cidr: "{{ public_subnet_1_cidr }}"
   az: "{{ aws_region }}a"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   tags:
    Name: "{{ vpc_subnet_tag }}"
    namespace: "{{ namespace }}"
  register: subnet_facts

- name: Set subnet fact
  set_fact:
   public_subnet_id: "{{ subnet_facts['subnet']['id'] }}"

#---------------------------------------------------
# Gateway
#---------------------------------------------------
- name: Create internet gateway
  ec2_vpc_igw:
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
  register: igw_facts

- name: Set gateway fact
  set_fact:
   igw_id: "{{ igw_facts['gateway_id'] }}"

#---------------------------------------------------
# Route Table
#---------------------------------------------------
- name: Create route table
  ec2_vpc_route_table:
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   subnets:
    - "{{ public_subnet_id }}"
   routes:
    - dest: "{{ public_route_cidr_block }}"
      gateway_id: "{{ igw_id }}"
   tags:
     Name: "{{ vpc_route_tag }}"
     namespace: "{{ namespace }}"
  register: route_facts

- name: Set availability zone fact
  set_fact:
    availability_zone: "{{ subnet_facts['subnet']['availability_zone'] }}"

#---------------------------------------------------
# Groups
#---------------------------------------------------
- name: Create vpc security group
  ec2_group:
   name: "{{ ec2_security_group }}"
   description: "Default security group that allows all instances in the VPC to talk to each other over any port and protocol."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules:
    - proto: "-1"
      from_port: "0"
      to_port: "0"
      group_name: "{{ ec2_security_group }}"
   rules_egress:
    - proto: "-1"
      from_port: "0"
      to_port: "0"
      group_name: "{{ ec2_security_group }}"

- name: Create ingress security group
  ec2_group:
   name: "{{ ec2_security_group_ingress }}"
   description: "Security group that allows public ingress to instances, HTTP, HTTPS and more."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules:
     - proto: "tcp"
       from_port: "{{ http_port }}"
       to_port: "{{ http_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ http_proxy_port }}"
       to_port: "{{ http_proxy_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ https_port }}"
       to_port: "{{ https_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ https_proxy_port }}"
       to_port: "{{ https_proxy_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
   rules_egress: []

- name: Create egress security group
  ec2_group:
   name: "{{ ec2_security_group_egress }}"
   description: "This security group allows public egress from the instances for HTTP and HTTPS, which is needed for yum updates, git access etc etc."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules_egress:
    - proto: "tcp"
      from_port: "{{ http_port }}"
      to_port: "{{ http_port }}"
      cidr_ip: "{{ public_route_cidr_block }}"
    - proto: "tcp"
      from_port: "{{ https_port }}"
      to_port: "{{ https_port }}"
      cidr_ip: "{{ public_route_cidr_block }}"

- name: Create ssh security group
  ec2_group:
   name: "{{ ec2_security_group_ssh }}"
   description: "Default security group that allows all instances in the VPC to talk to each other over any port and protocol."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules:
    - proto: "tcp"
      from_port: "{{ ssh_port }}"
      to_port: "{{ ssh_port }}"
      cidr_ip: "{{ public_route_cidr_block }}"
   rules_egress: []

- include: 03_vms.yml
- include: 04_dns.yml
- include: 05_ssh.yml

#---------------------------------------------------
# Add a host (and alternatively a group) to the
# ansible-playbook in-memory inventory
#---------------------------------------------------
- name: Add master/bastion to created_vms group
  add_host:
    name={{ item.ip }}
    groups=created_vms
    instance_name={{ item.name }}
  with_items:
    - { name: '{{ ec2_master_tag }}', ip: '{{ master_public_ip }}' }
    - { name: '{{ ec2_bastion_tag }}', ip: '{{ bastion_public_ip }}' }

- name: Add nodes to created_vms group
  add_host:
    name={{ item.public_ip }}
    groups=created_vms
    instance_name=node{{ item.index }}
  with_items: "{{ nodes_ip }}"

- name: Add master to created_nodes group
  add_host:
    name={{ item.ip }}
    groups=created_nodes
    instance_name={{ item.name }}
  with_items:
    - { name: '{{ ec2_master_tag }}', ip: '{{ master_public_ip }}' }

- name: Add nodes to created_nodes group
  add_host:
    name={{ item.public_ip }}
    groups=created_nodes
    instance_name=node{{ item.index }}
  with_items: "{{ nodes_ip }}"
